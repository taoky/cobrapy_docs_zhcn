{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 通量抽样"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 基本使用"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "开始通量抽样最简单的方法是使用在 `flux_analysis` 子模块中的 `sample` 函数 . `sample` 取至少两个参数: 一个 cobra 模型和你想要生成的样品数."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ACALD</th>\n",
       "      <th>ACALDt</th>\n",
       "      <th>ACKr</th>\n",
       "      <th>ACONTa</th>\n",
       "      <th>ACONTb</th>\n",
       "      <th>ACt2r</th>\n",
       "      <th>ADK1</th>\n",
       "      <th>AKGDH</th>\n",
       "      <th>AKGt2r</th>\n",
       "      <th>ALCD2x</th>\n",
       "      <th>...</th>\n",
       "      <th>RPI</th>\n",
       "      <th>SUCCt2_2</th>\n",
       "      <th>SUCCt3</th>\n",
       "      <th>SUCDi</th>\n",
       "      <th>SUCOAS</th>\n",
       "      <th>TALA</th>\n",
       "      <th>THD2</th>\n",
       "      <th>TKT1</th>\n",
       "      <th>TKT2</th>\n",
       "      <th>TPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.577302</td>\n",
       "      <td>-0.149662</td>\n",
       "      <td>-0.338001</td>\n",
       "      <td>10.090870</td>\n",
       "      <td>10.090870</td>\n",
       "      <td>-0.338001</td>\n",
       "      <td>0.997694</td>\n",
       "      <td>4.717467</td>\n",
       "      <td>-0.070599</td>\n",
       "      <td>-0.427639</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.255649</td>\n",
       "      <td>6.152278</td>\n",
       "      <td>6.692068</td>\n",
       "      <td>821.012351</td>\n",
       "      <td>-4.717467</td>\n",
       "      <td>2.230392</td>\n",
       "      <td>133.608893</td>\n",
       "      <td>2.230392</td>\n",
       "      <td>2.220236</td>\n",
       "      <td>5.263234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.639279</td>\n",
       "      <td>-0.505704</td>\n",
       "      <td>-0.031929</td>\n",
       "      <td>10.631865</td>\n",
       "      <td>10.631865</td>\n",
       "      <td>-0.031929</td>\n",
       "      <td>4.207702</td>\n",
       "      <td>6.763224</td>\n",
       "      <td>-0.024720</td>\n",
       "      <td>-0.133575</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.769792</td>\n",
       "      <td>14.894313</td>\n",
       "      <td>14.929989</td>\n",
       "      <td>521.410118</td>\n",
       "      <td>-6.763224</td>\n",
       "      <td>0.755207</td>\n",
       "      <td>66.656770</td>\n",
       "      <td>0.755207</td>\n",
       "      <td>0.749341</td>\n",
       "      <td>7.135499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.983410</td>\n",
       "      <td>-0.434676</td>\n",
       "      <td>-0.408318</td>\n",
       "      <td>11.046294</td>\n",
       "      <td>11.046294</td>\n",
       "      <td>-0.408318</td>\n",
       "      <td>5.510960</td>\n",
       "      <td>7.240802</td>\n",
       "      <td>-0.501086</td>\n",
       "      <td>-1.548735</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.088852</td>\n",
       "      <td>15.211972</td>\n",
       "      <td>15.807554</td>\n",
       "      <td>756.884622</td>\n",
       "      <td>-7.240802</td>\n",
       "      <td>0.065205</td>\n",
       "      <td>42.830676</td>\n",
       "      <td>0.065205</td>\n",
       "      <td>0.055695</td>\n",
       "      <td>8.109647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.893551</td>\n",
       "      <td>-0.618887</td>\n",
       "      <td>-0.612598</td>\n",
       "      <td>8.879426</td>\n",
       "      <td>8.879426</td>\n",
       "      <td>-0.612598</td>\n",
       "      <td>6.194372</td>\n",
       "      <td>5.382222</td>\n",
       "      <td>-0.563573</td>\n",
       "      <td>-1.274664</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.728387</td>\n",
       "      <td>15.960829</td>\n",
       "      <td>17.404437</td>\n",
       "      <td>556.750972</td>\n",
       "      <td>-5.382222</td>\n",
       "      <td>1.714682</td>\n",
       "      <td>37.386748</td>\n",
       "      <td>1.714682</td>\n",
       "      <td>1.709171</td>\n",
       "      <td>7.003325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.759520</td>\n",
       "      <td>-0.321021</td>\n",
       "      <td>-0.262520</td>\n",
       "      <td>10.801480</td>\n",
       "      <td>10.801480</td>\n",
       "      <td>-0.262520</td>\n",
       "      <td>4.815146</td>\n",
       "      <td>9.236588</td>\n",
       "      <td>-0.359817</td>\n",
       "      <td>-1.438499</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.840577</td>\n",
       "      <td>12.379023</td>\n",
       "      <td>13.141259</td>\n",
       "      <td>440.132011</td>\n",
       "      <td>-9.236588</td>\n",
       "      <td>2.822071</td>\n",
       "      <td>0.292885</td>\n",
       "      <td>2.822071</td>\n",
       "      <td>2.814629</td>\n",
       "      <td>6.205245</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 95 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ACALD    ACALDt      ACKr     ACONTa     ACONTb     ACt2r      ADK1  \\\n",
       "0 -0.577302 -0.149662 -0.338001  10.090870  10.090870 -0.338001  0.997694   \n",
       "1 -0.639279 -0.505704 -0.031929  10.631865  10.631865 -0.031929  4.207702   \n",
       "2 -1.983410 -0.434676 -0.408318  11.046294  11.046294 -0.408318  5.510960   \n",
       "3 -1.893551 -0.618887 -0.612598   8.879426   8.879426 -0.612598  6.194372   \n",
       "4 -1.759520 -0.321021 -0.262520  10.801480  10.801480 -0.262520  4.815146   \n",
       "\n",
       "      AKGDH    AKGt2r    ALCD2x    ...          RPI   SUCCt2_2     SUCCt3  \\\n",
       "0  4.717467 -0.070599 -0.427639    ...    -2.255649   6.152278   6.692068   \n",
       "1  6.763224 -0.024720 -0.133575    ...    -0.769792  14.894313  14.929989   \n",
       "2  7.240802 -0.501086 -1.548735    ...    -0.088852  15.211972  15.807554   \n",
       "3  5.382222 -0.563573 -1.274664    ...    -1.728387  15.960829  17.404437   \n",
       "4  9.236588 -0.359817 -1.438499    ...    -2.840577  12.379023  13.141259   \n",
       "\n",
       "        SUCDi    SUCOAS      TALA        THD2      TKT1      TKT2       TPI  \n",
       "0  821.012351 -4.717467  2.230392  133.608893  2.230392  2.220236  5.263234  \n",
       "1  521.410118 -6.763224  0.755207   66.656770  0.755207  0.749341  7.135499  \n",
       "2  756.884622 -7.240802  0.065205   42.830676  0.065205  0.055695  8.109647  \n",
       "3  556.750972 -5.382222  1.714682   37.386748  1.714682  1.709171  7.003325  \n",
       "4  440.132011 -9.236588  2.822071    0.292885  2.822071  2.814629  6.205245  \n",
       "\n",
       "[5 rows x 95 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from cobra.test import create_test_model\n",
    "from cobra.flux_analysis import sample\n",
    "\n",
    "model = create_test_model(\"textbook\")\n",
    "s = sample(model, 100)\n",
    "s.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "默认样品使用 `optgp` 方法，基于 [这里的方法](http://dx.doi.org/10.1371/journal.pone.0086587) ，因为它适合大模型并且能并行运行. 默认抽样器使用单进程. 这可以用 `processes` 参数来改变."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One process:\n",
      "CPU times: user 7.91 s, sys: 4.09 s, total: 12 s\n",
      "Wall time: 6.52 s\n",
      "Two processes:\n",
      "CPU times: user 288 ms, sys: 495 ms, total: 783 ms\n",
      "Wall time: 3.52 s\n"
     ]
    }
   ],
   "source": [
    "print(\"One process:\")\n",
    "%time s = sample(model, 1000)\n",
    "print(\"Two processes:\")\n",
    "%time s = sample(model, 1000, processes=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "另外你也可以用 Artificial Centering Hit-and-Run 来抽样，通过设置方法为 `achr`.  `achr` 不支持并行运行但有很好的汇聚性 (convergence) 并且也几乎是马尔可夫 (Markovian) 的."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "s = sample(model, 100, method=\"achr\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "通常设定抽样器代价是昂贵的，因为初始搜索方向通过解决大量线性规划问题决定. 因此, 我们推荐一次性生成尽可能多的样品. 但是, 这可能需要对抽样流程更好的控制，如以下节说的那样."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 高级使用"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 抽样器对象"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "通过直接使用抽样器类，抽样过程可以从更低层次控制。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from cobra.flux_analysis.sampling import OptGPSampler, ACHRSampler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "这两个抽样器类有标准化的接口并接受额外的参数. 比如说 `thinning` 参数. \"Thinning\" 意思是只在每 n 次迭代时记录样品. 一个更高的 thinning 参数代表更少的相关样品，但需要更长的计算时间. 默认抽样器使用 100 为 thinning 参数，这会创建粗略上不相关的样品. 如果你想要更少的样品但是更好地融合  (mixing) 的话，可以增加参数. 如果你想要研究你自己的模型的汇聚性 (convergence) 的话你可能会想把它设置为 1 以包含所有迭代."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "achr = ACHRSampler(model, thinning=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`OptGPSampler` 有一个额外的 `processes` 参数指定创建并行抽样链的进程数. 考虑你的 CPU 核心以获得最大性能. 正如之前提到过的一样，因为初始搜索方向的生成，类初始化会花掉几分钟. 抽样本身是很快的."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "optgp = OptGPSampler(model, processes=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 抽样与验证"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "两个抽样器都有抽样函数来从初始化的对象中生成样品，表现得像上面提到的 `sample` 函数一样, 只是这次它只接受单个参数: 样品数. 对于 `OptGPSampler` 来说样品数应该是进程数的倍数, 否则它会自动提高到最接近的进程数的倍数."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "s1 = achr.sample(100)\n",
    "\n",
    "s2 = optgp.sample(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "你可以反复调用 `sample`，并且两个抽样器都优化过来产生大量样品，而不陷入 \"数值陷阱 (numerical traps)\". 所有抽样器对象有一个 `validate` 函数来检查点集合是否是可求解的，并且给出会对可求解性造成破坏的详细信息，以一段表示可求解性的短代码呈现. 这里的短代码是以下字母的集合:\n",
    "\n",
    "- \"v\" - 有效点 (valid point)\n",
    "- \"l\" - 下界违例 (lower bound violation)\n",
    "- \"u\" - 上界违例 (upper bound violation)\n",
    "- \"e\" - 平衡值违例（表示这个点不在稳态）(equality violation (meaning the point is not a steady state))\n",
    "\n",
    "比如说对一个随机的通量分布 (应该是不可求解的):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['le'], dtype='<U3')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "bad = np.random.uniform(-1000, 1000, size=len(model.reactions))\n",
    "achr.validate(np.atleast_2d(bad))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "然后对我们生成的样品:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v',\n",
       "       'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v',\n",
       "       'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v',\n",
       "       'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v',\n",
       "       'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v',\n",
       "       'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v',\n",
       "       'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v',\n",
       "       'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v'], dtype='<U3')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "achr.validate(s1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "即使大部分模型在数值上足够稳定，求解器只能生成有效样品，我们还是建议检查. `validate` 很快，即使模型很大，样品很多. 如果你发现了无效样品，你没有必要重新把整个抽样跑一遍，只要从样品的 DataFrame 中把它们排除掉."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1_valid = s1[achr.validate(s1) == \"v\"]\n",
    "len(s1_valid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 批量抽样"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "抽样器对象为生成数以十亿记的样品来制作的, 但是对基因组大小的模型使用 `sample` 函数可能会快速填满你的内存. 这里, 抽样器的 `batch` 方法可能会有用. `batch` 接受两个参数, 每批的样品数和批数. 以一个小样例讲解会有意义. \n",
    "\n",
    "假设我们想要量化我们的样品生长的比例. 这里我们可能会想生成 10 批，每批 50 样品，测量单独的 100 个样品中生长率大于 0.1 的比例. 最后, 我们想计算这些比例的均值和标准差."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Usually 10.90% +- 3.83% grow...\n"
     ]
    }
   ],
   "source": [
    "counts = [np.mean(s.Biomass_Ecoli_core > 0.1) for s in optgp.batch(100, 10)]\n",
    "print(\"Usually {:.2f}% +- {:.2f}% grow...\".format(\n",
    "    np.mean(counts) * 100.0, np.std(counts) * 100.0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 添加约束"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "通量抽样会考虑模型中定义的额外的约束. 比如说我们可以添加一个约束，要求生长与上一节提到的类似."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "co = model.problem.Constraint(model.reactions.Biomass_Ecoli_core.flux_expression, lb=0.1)\n",
    "model.add_cons_vars([co])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*注意以下仅为演示用途. 很多时候你可以直接设置反应下界，而不是添加新约束.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    0.118106\n",
      "1    0.120205\n",
      "2    0.206187\n",
      "3    0.198633\n",
      "4    0.206575\n",
      "5    0.119032\n",
      "6    0.119231\n",
      "7    0.127219\n",
      "8    0.120086\n",
      "9    0.182586\n",
      "Name: Biomass_Ecoli_core, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "s = sample(model, 10)\n",
    "print(s.Biomass_Ecoli_core)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "我们可以看到，抽样考虑了新的约束条件."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
