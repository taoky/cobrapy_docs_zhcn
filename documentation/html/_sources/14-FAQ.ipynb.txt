{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FAQ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "此文档回答一些常见问题，在其他文档中未提及。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## cobrapy 咋装?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "请看 [INSTALL.rst](https://github.com/opencobra/cobrapy/blob/master/INSTALL.rst) 文件."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 我咋引用 cobrapy?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "请引用 2013 的论文: [10.1186/1752-0509-7-74](http://dx.doi.org/doi:10.1186/1752-0509-7-74)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 我咋重命名反应和代谢物?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TL;DR 之后使用 `Model.repair`\n",
    "\n",
    "重命名反应和代谢物时, 会出现问题，因为 cobra indexes based off of ID's, 这可能会出现问题. 比如说:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function\n",
    "import cobra.test\n",
    "model = cobra.test.create_test_model()\n",
    "\n",
    "for metabolite in model.metabolites:\n",
    "    metabolite.id = \"test_\" + metabolite.id\n",
    "\n",
    "try:\n",
    "    model.metabolites.get_by_id(model.metabolites[0].id)\n",
    "except KeyError as e:\n",
    "    print(repr(e))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model.repair 会重建必要的 indexes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td><strong>Metabolite identifier</strong></td><td>test_dcaACP_c</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td><strong>Name</strong></td><td>Decanoyl-ACP-n-C100ACP</td>\n",
       "            </tr>\n",
       "            </tr><tr>\n",
       "                <td><strong>Memory address</strong></td>\n",
       "                <td>0x0110f09630</td>\n",
       "            </tr><tr>\n",
       "            <tr>\n",
       "                <td><strong>Formula</strong></td><td>C21H39N2O8PRS</td>\n",
       "            </tr>\n",
       "        </table>"
      ],
      "text/plain": [
       "<Metabolite test_dcaACP_c at 0x110f09630>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.repair()\n",
    "model.metabolites.get_by_id(model.metabolites[0].id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 我咋删基因啊?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "这依赖于「删基因」到底是什么意思。\n",
    "\n",
    "如果你希望模拟敲除了一个基因的模型, 使用 `cobra.manipulation.delete_model_genes` 函数. 效果可以被 `cobra.manipulation.undelete_model_genes` 复原."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bounds before knockout: (-1000.0, 1000.0)\n",
      "bounds after knockouts (0.0, 0.0)\n"
     ]
    }
   ],
   "source": [
    "model = cobra.test.create_test_model()\n",
    "PGI = model.reactions.get_by_id(\"PGI\")\n",
    "print(\"bounds before knockout:\", (PGI.lower_bound, PGI.upper_bound))\n",
    "cobra.manipulation.delete_model_genes(model, [\"STM4221\"])\n",
    "print(\"bounds after knockouts\", (PGI.lower_bound, PGI.upper_bound))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "如果你真的想要把某个基因从模型中抹除的话，这会更难，因为这需要改变所有牵扯到这个基因的 `gene_reaction_rule` 字符串。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 我咋改变反应的可逆性?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Reaction.reversibility` 是 cobra 中的一个属性，它在请求上下界的时候被计算."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = cobra.test.create_test_model()\n",
    "model.reactions.get_by_id(\"PGI\").reversibility"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "直接设置会导致错误或警告。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "cobra/core/reaction.py:501 \u001b[1;31mUserWarning\u001b[0m: Setting reaction reversibility is ignored\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    model.reactions.get_by_id(\"PGI\").reversibility = False\n",
    "except Exception as e:\n",
    "    print(repr(e))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "改变可逆性的方法是改变界限使反应不可逆。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.reactions.get_by_id(\"PGI\").lower_bound = 10\n",
    "model.reactions.get_by_id(\"PGI\").reversibility"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 我咋从 COBRA 模型生成 LP 文件? （暂不翻译）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 基于 optlang 的求解器"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With optlang solvers, the LP formulation of a model is obtained by it's string representation. All solvers behave the same way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('test.lp', 'w') as out:\n",
    "    out.write(str(model.solver))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### cobrapy's 内置求解器"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the internal solvers, we first create the problem and use functions bundled with the solver. \n",
    "\n",
    "Please note that unlike the LP file format, the MPS file format does not specify objective direction and is always a minimization. Some (but not all) solvers will rewrite the maximization as a minimization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = cobra.test.create_test_model()\n",
    "# glpk through cglpk\n",
    "glpk = cobra.solvers.cglpk.create_problem(model)\n",
    "glpk.write(\"test.lp\")\n",
    "glpk.write(\"test.mps\")  # will not rewrite objective\n",
    "# cplex\n",
    "cplex = cobra.solvers.cplex_solver.create_problem(model)\n",
    "cplex.write(\"test.lp\")\n",
    "cplex.write(\"test.mps\")  # rewrites objective"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 我咋可视化通量的解?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "cobrapy 和 [escher](https://escher.github.io/) 包协调很好, 适于这种目的. 垂询 [escher documentation](https://escher.readthedocs.org/en/latest/) 以查看示例."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
