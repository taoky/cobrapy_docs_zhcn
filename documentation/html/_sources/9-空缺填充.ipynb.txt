{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 空缺填充 (Gapfillling)\n",
    "\n",
    "模型空缺填充指寻找一些添加到模型的反应，使模型有解. 有一些这样的算法，比如 [Kumar et al. 2009](http://dx.doi.org/10.1371/journal.pcbi.1000308) 和 [Reed et al. 2006](http://www.pnas.org/content/103/46/17480.short). Cobrapy 有一个空缺填充实现，类似于 Reed et al. 的，其使用混合整数线性规划来找到需要添加到用户定义反应集合的最小反应数, 即 通用模型. 大致地, 我们要解决这样一个问题："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "最小化: $$\\sum_i c_i * z_i$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "约束于"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$Sv = 0$$\n",
    "$$v^\\star \\geq t$$\n",
    "$$l_i\\leq v_i \\leq u_i$$\n",
    "$$v_i = 0 \\textrm{ if } z_i = 0$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "这里 l, u 是反应 i 的上下限；z 是指示器变量，如果反应没用到就是 0，否则就是 1；c 是用户定义的代价，与使用第 i 个反应有关；$v^\\star$ 是目标的通量；*t* 是此目标的下界. 为了展示, 让我们拿一个模型，去掉一些必要的反应."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import cobra.test\n",
    "from cobra.flux_analysis import gapfill\n",
    "model = cobra.test.create_test_model(\"salmonella\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "在此模型中D果糖-6-磷酸 (D-Fructose-6-phosphate) 是一个重要代谢物. 我们会去掉所有使用它的反应, 把它们加到另外一个模型中."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "universal = cobra.Model(\"universal_reactions\")\n",
    "for i in [i.id for i in model.metabolites.f6p_c.reactions]:\n",
    "    reaction = model.reactions.get_by_id(i)\n",
    "    universal.add_reaction(reaction.copy())\n",
    "    model.remove_reactions([reaction])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "现在，由于出现空缺，模型不会生长."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.optimize().objective_value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "我们会使用模型的原始目标, 生长值, 来找到在这些被移除的反应中需要哪些反应来使模型再次可解. 这很类似于进行 'no-growth but growth (NGG)' 预测 of [Kumar et al. 2009](http://dx.doi.org/10.1371/journal.pcbi.1000308)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GF6PTA\n",
      "F6PP\n",
      "TKT2\n",
      "FBP\n",
      "MAN6PI\n"
     ]
    }
   ],
   "source": [
    "solution = gapfill(model, universal, demand_reactions=False)\n",
    "for reaction in solution[0]:\n",
    "    print(reaction.id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "通过多次迭代，我们可以获得多个可能的反应集合"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---- Run 1 ----\n",
      "GF6PTA\n",
      "F6PP\n",
      "TKT2\n",
      "FBP\n",
      "MAN6PI\n",
      "---- Run 2 ----\n",
      "GF6PTA\n",
      "TALA\n",
      "PGI\n",
      "F6PA\n",
      "MAN6PI\n",
      "---- Run 3 ----\n",
      "GF6PTA\n",
      "F6PP\n",
      "TKT2\n",
      "FBP\n",
      "MAN6PI\n",
      "---- Run 4 ----\n",
      "GF6PTA\n",
      "TALA\n",
      "PGI\n",
      "F6PA\n",
      "MAN6PI\n"
     ]
    }
   ],
   "source": [
    "result = gapfill(model, universal, demand_reactions=False, iterations=4)\n",
    "for i, entries in enumerate(result):\n",
    "    print(\"---- Run %d ----\" % (i + 1))\n",
    "    for e in entries:\n",
    "        print(e.id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "我们也可以不使用原目标，指定一个给出的，我们希望模型产出的代谢物"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FBP\n"
     ]
    }
   ],
   "source": [
    "with model:\n",
    "    model.objective = model.add_boundary(model.metabolites.f6p_c, type='demand')\n",
    "    solution = gapfill(model, universal)\n",
    "    for reaction in solution[0]:\n",
    "        print(reaction.id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "最后, 注意 混合整数线性规划问题计算代价高昂，对大模型你可能会想考虑替代的 [空缺填充方法 (Matlab Version)](http://opencobra.github.io/cobrapy/tags/gapfilling/) 与 [重建方法 (Matlab Version)](http://opencobra.github.io/cobrapy/tags/reconstruction/)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
